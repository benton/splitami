---
Description: Splits an input AMI into a new AMI spread across multiple EBS snapshots
Parameters:
  AppSourceAMI:
    Description: Source AMI
    Type: String
    Default: ami-70173610
  AppFilesystemParameters:
    Description: "space-separated filesystem designations of the form [PATH]:[SIZE]:[MOUNT_OPTIONS]"
    # Default disk partitions for Center for Internet Security recommendations
    Default: "/tmp:5:nodev,nosuid"
    # Default: "/data:30:defaults /tmp:20:nodev,nosuid /var/tmp:7:nodev,nosuid,noexec /var:10:defaults /home:10:defaults,nodev /var/log/audit:5:defaults /var/log:15:defaults"
    Type: String
  SoftwareRepoURL:
    Description: The git checkout URL for the repo that contains splitAMI.rb
    Type: String
    Default: https://github.com/benton/splitami.git
  SoftwareVersion:
    Description: Which branch / Git reference of splitAMI.rb to run
    Type: String
    Default: master
  InstanceType:
    Description: Worker EC2 instance type (m3.medium, etc).
    Type: String
    ConstraintDescription: must be a valid EC2 instance type.
    Default: m3.medium
  InstanceBootKey:
    Description: EC2 Boot Key, installed for user 'ec2-user'
    Type: AWS::EC2::KeyPair::KeyName
    Default: medistrano
Resources:
  AMIInstance:
    Type: "AWS::EC2::Instance"
    DependsOn: IAMInstanceProfile
    Metadata:
      AWS::CloudFormation::Init:
        config:
          package_upgrade: true
          files:
            "/usr/local/sbin/splitami-install":
              mode: '0755'
              content:
                !Sub |
                  #!/usr/bin/env bash
                  set -ex
                  yum -y install git gcc ruby-devel emacs
                  gem install io-console bundler
                  rm -rf /splitami
                  git clone ${SoftwareRepoURL} /splitami
                  cd /splitami
                  git checkout ${SoftwareVersion}
                  bundle install --jobs=4
            "/usr/local/sbin/splitami-run":
              mode: '0755'
              content:
                !Sub |
                  #!/usr/bin/env bash
                  set -ex
                  cd /splitami
                  exec ./splitAMI.rb ${AppSourceAMI} ${AppFilesystemParameters}
    Properties:
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -e
            export PATH="/usr/local/sbin:/usr/local/bin:$PATH:/opt/aws/bin"
            echo "Running cfn-init..."
            cfn-init --region ${AWS::Region} -s ${AWS::StackName} -r AMIInstance
            splitami-install && splitami-run
            echo "Shutting down stack ${AWS::StackName}..."
            aws configure set default.region ${AWS::Region}
            aws cloudformation delete-stack --stack-name ${AWS::StackName}
      ImageId:
        Fn::FindInMap:
        - RegionAMIMap
        - Ref: AWS::Region
        - AMI
      InstanceType: !Ref InstanceType
      KeyName: !Ref InstanceBootKey
      SecurityGroupIds:
      - !GetAtt SplitAMISecurityGroup.GroupId
      SubnetId: !Ref PublicSubnet
      IamInstanceProfile: !Ref IAMInstanceProfile
      Tags:
      - Key: Application
        Value: !Ref AWS::StackName
      - Key: Name
        Value: AMI Splitter
      - Key: Project
        Value: splitami
      - Key: Environment
        Value: sandbox
      - Key: Type
        Value: app
      - Key: 'mdsol:splitami:sandbox:app'
        Value: ""
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: CloudWatchLogs-LogEvents
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            Resource: "*"
      - PolicyName: Split-EBS-AMIs
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ec2:AttachVolume
            - ec2:CreateVolume
            - ec2:DeleteVolume
            - ec2:CreateImage
            - ec2:DescribeVolumes
            - ec2:DetachVolume
            - ec2:DescribeInstances
            - ec2:CreateSnapshot
            - ec2:DescribeSnapshots
            - ec2:DescribeImages
            - ec2:RegisterImage
            - ec2:CreateTags
            - ec2:ModifyImageAttribute
            - ec2:ModifySnapshotAttribute
            Resource: "*"
      - PolicyName: Delete-My-Own-CF-stack
        PolicyDocument:
          Statement:
          - Action:
            - cloudformation:DeleteStack
            Effect: Allow
            Resource: !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*
          - Action:
            - ec2:DescribeInstances
            Effect: Allow
            Resource: "*"
          - Action:
            - ec2:TerminateInstances
            - ec2:DeleteSecurityGroup
            Condition:
              StringEquals:
                ec2:ResourceTag/aws:cloudformation:stack-id:
                  Ref: AWS::StackId
            Effect: Allow
            Resource: "*"
          - Action:
            - ec2:DeleteVpc
            - ec2:DeleteSubnet
            - ec2:DeleteInternetGateway
            - ec2:DeleteNetworkAcl
            - ec2:DetachInternetGateway
            - ec2:DeleteRouteTable
            - ec2:DeleteNetworkAclEntry
            - ec2:DisassociateRouteTable
            - ec2:DescribeRouteTables
            - ec2:DeleteRoute
            - ec2:DescribeNetworkAcls
            - ec2:DescribeInternetGatewaysResult
            - ec2:DescribeSubnets
            - ec2:ReplaceNetworkAclAssociation
            - ec2:DescribeInternetGateways
            - ec2:DescribeVpcs
            Effect: Allow
            Resource: "*"
          - Action:
            - iam:DeleteInstanceProfile
            - iam:RemoveRoleFromInstanceProfile
            Effect: Allow
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:iam::'
                - Ref: AWS::AccountId
                - ":instance-profile/"
                - Ref: AWS::StackName
                - "-"
                - IAMInstanceProfile
                - "-*"
          - Action:
            - iam:DeleteRole
            - iam:DeleteRolePolicy
            Effect: Allow
            Resource:
              Fn::Join:
              - ''
              - - 'arn:aws:iam::'
                - Ref: AWS::AccountId
                - ":role/"
                - Ref: AWS::StackName
                - "-IAMRole-*"
  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: IAMRole
  VPC:
    Type: AWS::EC2::VPC
    DependsOn: IAMInstanceProfile
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - VPC
        - CIDR
      Tags:
      - Key: Application
        Value: !Ref AWS::StackName
      - Key: Network
        Value: Public
  PublicSubnet:
    Type: AWS::EC2::Subnet
    DependsOn: IAMInstanceProfile
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: 'true'
      CidrBlock:
        Fn::FindInMap:
        - SubnetConfig
        - Public
        - CIDR
      Tags:
      - Key: Application
        Value: !Ref AWS::StackName
      - Key: Network
        Value: Public
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: IAMInstanceProfile
    Properties:
      Tags:
      - Key: Application
        Value: !Ref AWS::StackName
      - Key: Network
        Value: Public
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: IAMInstanceProfile
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Application
        Value: !Ref AWS::StackName
      - Key: Network
        Value: Public
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: IAMInstanceProfile
    Properties:
      SubnetId:
        Ref: PublicSubnet
      RouteTableId:
        Ref: PublicRouteTable
  PublicNetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Application
        Value: !Ref AWS::StackName
      - Key: Network
        Value: Public
  InboundPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: IAMInstanceProfile
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  OutboundPublicNetworkAclEntry:
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: IAMInstanceProfile
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'
  PublicSubnetNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn: IAMInstanceProfile
    Properties:
      SubnetId:
        Ref: PublicSubnet
      NetworkAclId:
        Ref: PublicNetworkAcl
  SplitAMISecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: IAMInstanceProfile
    Properties:
      GroupDescription: Allow ssh to host
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
Mappings:
  # AMI Name = amzn-ami-hvm-2017.03.0.20170417-x86_64-gp2
  RegionAMIMap:
    ap-northeast-1:
      AMI: ami-xxxxxxxx
    sa-east-1:
      AMI: ami-xxxxxxxx
    ap-southeast-2:
      AMI: ami-xxxxxxxx
    ap-southeast-1:
      AMI: ami-xxxxxxxx
    eu-central-1: # Frankfurt, Germany
      AMI: ami-b968bad6
    eu-west-1: # Dublin, Ireland
      AMI: ami-01ccc867
    eu-west-2: # London, England
      AMI: ami-b6daced2
    us-east-1: # Virginia, USA
      AMI: ami-c58c1dd3
    us-west-1: # California, USA
      AMI: ami-7a85a01a
    us-west-2: # Oregon, USA
      AMI: ami-xxxxxxxx
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/16
    Public:
      CIDR: 10.0.0.0/24
Outputs:
  DebugCommand:
    Description: Run this command to follow the build log.
    Value: !Sub |-
      ssh -i ~/.ssh/${InstanceBootKey} ec2-user@${AMIInstance.PublicDnsName}
        tail -f /var/log/cloud-init-output.log
